diff --git a/ngx_http_concat_module.c b/ngx_http_concat_module.c
index 80e427c..f9bb4de 100644
--- a/ngx_http_concat_module.c
+++ b/ngx_http_concat_module.c
@@ -16,6 +16,9 @@ typedef struct {
     ngx_str_t    delimiter;
     ngx_flag_t   ignore_file_error;
 
+	ngx_str_t begin;
+	ngx_str_t end;
+
     ngx_hash_t   types;
     ngx_array_t *types_keys;
 } ngx_http_concat_loc_conf_t;
@@ -23,6 +26,7 @@ typedef struct {
 
 static ngx_int_t ngx_http_concat_add_path(ngx_http_request_t *r,
     ngx_array_t *uris, size_t max, ngx_str_t *path, u_char *p, u_char *v);
+static ngx_int_t set_custom_header_in_headers_out(ngx_http_request_t *r, ngx_str_t *key, ngx_str_t *value);
 static ngx_int_t ngx_http_concat_init(ngx_conf_t *cf);
 static void *ngx_http_concat_create_loc_conf(ngx_conf_t *cf);
 static char *ngx_http_concat_merge_loc_conf(ngx_conf_t *cf, void *parent,
@@ -80,6 +84,20 @@ static ngx_command_t  ngx_http_concat_commands[] = {
       offsetof(ngx_http_concat_loc_conf_t, ignore_file_error),
       NULL },
 
+	{ ngx_string("slice_arg_begin"),
+		NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+		ngx_conf_set_str_slot,
+		NGX_HTTP_LOC_CONF_OFFSET,
+		offsetof(ngx_http_concat_loc_conf_t, begin),
+	NULL },
+	
+	{ ngx_string("slice_arg_end"),
+		NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+		ngx_conf_set_str_slot,
+		NGX_HTTP_LOC_CONF_OFFSET,
+		offsetof(ngx_http_concat_loc_conf_t, end),
+	NULL },
+
       ngx_null_command
 };
 
@@ -118,12 +136,14 @@ ngx_module_t  ngx_http_concat_module = {
 static ngx_int_t
 ngx_http_concat_handler(ngx_http_request_t *r)
 {
-    off_t                       length;
+    off_t                       length, length_all;
+    off_t begin, end;
     size_t                      root, last_len;
     time_t                      last_modified;
     u_char                     *p, *v, *e, *last, *last_type;
     ngx_int_t                   rc;
     ngx_str_t                  *uri, *filename, path;
+    ngx_str_t value;
     ngx_buf_t                  *b;
     ngx_uint_t                  i, j, level;
     ngx_flag_t                  timestamp;
@@ -147,6 +167,29 @@ ngx_http_concat_handler(ngx_http_request_t *r)
         return NGX_DECLINED;
     }
 
+    begin = 0;
+	end = 0;    
+
+    if (r->args.len) {
+    	if (ngx_http_arg(r, clcf->begin.data, clcf->begin.len, &value) == NGX_OK)
+    	{
+    		begin = ngx_atoof(value.data, value.len);
+    		if (begin == NGX_ERROR) {
+    			begin = 0;
+    		}
+    	}
+    	if (ngx_http_arg(r, clcf->end.data, clcf->end.len, &value) == NGX_OK) {
+    		end = ngx_atoof(value.data, value.len);
+    		if (end == NGX_ERROR) {
+    			end = 0;
+   		}
+    	}
+    }
+	
+	ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http concat begin: \"%d\"", begin);	
+
+
     /* the length of args must be greater than or equal to 2 */
     if (r->args.len < 2 || r->args.data[0] != '?') {
         return NGX_DECLINED;
@@ -226,6 +269,7 @@ ngx_http_concat_handler(ngx_http_request_t *r)
     b = NULL;
     last_type = NULL;
     length = 0;
+	length_all = 0;
     uri = uris.elts;
     for (i = 0; i < uris.nelts; i++) {
         filename = uri + i;
@@ -269,6 +313,8 @@ ngx_http_concat_handler(ngx_http_request_t *r)
         }
 
         ngx_memzero(&of, sizeof(ngx_open_file_info_t));
+		
+		
 
         of.read_ahead = ccf->read_ahead;
         of.directio = ccf->directio;
@@ -332,9 +378,8 @@ ngx_http_concat_handler(ngx_http_request_t *r)
 
         if (of.size == 0) {
             continue;
-        }
-
-        length += of.size;
+        }						   		
+				
         if (last_out == NULL) {
             last_modified = of.mtime;
 
@@ -353,8 +398,37 @@ ngx_http_concat_handler(ngx_http_request_t *r)
         if (b->file == NULL) {
             return NGX_HTTP_INTERNAL_SERVER_ERROR;
         }
-
-        b->file_pos = 0;
+		
+		ngx_log_error(NGX_LOG_INFO, r->connection->log, of.err,
+                               "http concat of size: \"%d\"", of.size);		   
+
+        ngx_log_error(NGX_LOG_INFO, r->connection->log, of.err,
+                               "http concat before length:%d, begin:%d, of.size:%d, filename:%s", length,begin,of.size,filename);		
+							   
+			   
+		if (begin >= length_all && begin <= length_all + of.size) {
+			begin = begin - length_all;
+			length += of.size - begin;
+			length_all += of.size;		
+		} else if (begin < length_all) {
+			begin = 0;
+			length += of.size;
+			length_all += of.size;		
+		} else {
+			length_all += of.size;		
+			continue;
+		}
+		
+				
+		
+		ngx_log_error(NGX_LOG_INFO, r->connection->log, of.err,
+                               "http concat after length:%d, begin:%d, of.size:%d", length,begin,of.size);		  
+		
+		b->file_pos = begin;
+				   
+		ngx_log_error(NGX_LOG_INFO, r->connection->log, of.err,
+                              "http concat begin filepos: \"%d\"", begin);
+					       
         b->file_last = of.size;
 
         b->in_file = b->file_last ? 1 : 0;
@@ -408,10 +482,24 @@ ngx_http_concat_handler(ngx_http_request_t *r)
         cl->next = NULL;
     }
 
+	if (length_all > end && end != 0 && end > begin) {
+		length = end - begin;
+	}
+	
     r->headers_out.status = NGX_HTTP_OK;
     r->headers_out.content_length_n = length;
     r->headers_out.last_modified_time = last_modified;
 
+	
+	ngx_str_t header_name = ngx_string("Accept-Ranges");
+	ngx_str_t header_value = ngx_string("bytes");	
+		
+	//set a header
+	ngx_int_t hr = set_custom_header_in_headers_out(r, &header_name, &header_value);
+	if (hr != NGX_OK) {
+		ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "error set_custom_header_in_headers_out");
+	}			
+
     if (b == NULL) {
         r->header_only = 1;
     }
@@ -469,6 +557,7 @@ ngx_http_concat_add_path(ngx_http_request_t *r, ngx_array_t *uris,
     args.data = NULL;
     flags = NGX_HTTP_LOG_UNSAFE;
 
+	
     if (ngx_http_parse_unsafe_uri(r, uri, &args, &flags) != NGX_OK) {
         return NGX_HTTP_BAD_REQUEST;
     }
@@ -476,6 +565,10 @@ ngx_http_concat_add_path(ngx_http_request_t *r, ngx_array_t *uris,
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                    "http concat add file: \"%s\"", uri->data);
 
+    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http concat p: \"%s\"", p);    
+
+
     return NGX_OK;
 }
 
@@ -547,3 +640,33 @@ ngx_http_concat_init(ngx_conf_t *cf)
 
     return NGX_OK;
 }
+
+ngx_int_t
+set_custom_header_in_headers_out(ngx_http_request_t *r, ngx_str_t *key, ngx_str_t *value) {
+    ngx_table_elt_t   *h;
+ 
+    /*
+    All we have to do is just to allocate the header...
+    */
+    h = ngx_list_push(&r->headers_out.headers);
+    if (h == NULL) {
+        return NGX_ERROR;
+    }
+ 
+    /*
+    ... setup the header key ...
+    */
+    h->key = *key;
+ 
+    /*
+    ... and the value.
+    */
+    h->value = *value;
+ 
+    /*
+    Mark the header as not deleted.
+    */
+    h->hash = 1;
+ 
+    return NGX_OK;
+}
